from пицца import ПиццаПепперони, ПиццаБарбекю, ПиццаДарыМоря
from заказ import Заказ
import time


class Терминал:
    """
    Класс Терминал обеспечивает взаимодействие с клиентом.

    Атрибуты:
        меню (list): Список доступных пицц.
        заказ (Заказ): Текущий заказ.
        отображать_меню (bool): Флаг для отображения меню.

    Методы:
        __init__: Инициализирует объект Терминал.
        __str__: Возвращает строковое представление терминала.
        показать_меню: Отображает меню.
        обработать_команду: Обрабатывает команды пользователя.
        рассчитать_сдачу: Рассчитывает сдачу.
        принять_оплату: Принимает оплату.
    """

    КОМПАНИЯ = "Пиццерия #1"
    КОМАНДА_ОТМЕНА_ЗАКАЗА = -1
    КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА = 0

    def __init__(self):
        """
        Инициализирует объект Терминал.

        Устанавливает меню из доступных пицц и флаг отображения меню.
        """
        self.меню = [ПиццаПепперони(), ПиццаБарбекю(), ПиццаДарыМоря()]
        self.заказ = None
        self.отображать_меню = True

    def __str__(self):
        """
        Возвращает строковое представление терминала.

        Возвращает:
            str: Название пиццерии и версия программы.
        """
        return f"{Терминал.КОМПАНИЯ}, версия программы 1.0"

    def показать_меню(self):
        """
        Отображает меню.

        Если флаг отображения меню активен, выводит список доступных пицц и инструкции.
        """
        if not self.отображать_меню:
            return

        print(f"{Терминал.КОМПАНИЯ}")
        print("Добро пожаловать!\n")
        print("Меню:")
        for i, пицца in enumerate(self.меню, 1):
            print(f"{i}. {пицца}")
        print("Для выбора укажите цифру через <ENTER>.")
        print("Для отмены заказа введите -1")
        print("Для подтверждения заказа введите 0")
        self.отображать_меню = False

    def обработать_команду(self, пункт_меню):
        """
        Обрабатывает команды пользователя.

        Параметры:
            пункт_меню (str): Выбор пользователя.

        Возможные команды:
            -1: Отменить заказ.
            0: Подтвердить заказ.
            1..len(self.меню): Добавить пиццу в заказ.
        """
        try:
            пункт_меню = int(пункт_меню)
            if пункт_меню == Терминал.КОМАНДА_ОТМЕНА_ЗАКАЗА:
                if self.заказ:
                    print("Заказ отменен.")
                    self.заказ = None
                else:
                    print("Нет активного заказа для отмены.")
            elif пункт_меню == Терминал.КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА:
                if self.заказ:
                    print("Заказ подтвержден.")
                    print(self.заказ)
                    self.принять_оплату()
                    self.заказ.выполнить()
                    self.заказ = None
                else:
                    print("Нет активного заказа для подтверждения.")
            elif 1 <= пункт_меню <= len(self.меню):
                if not self.заказ:
                    self.заказ = Заказ()
                пицца = self.меню[пункт_меню - 1]
                self.заказ.добавить(пицца)
            else:
                raise ValueError
        except ValueError:
            print("Не могу распознать команду! Проверьте ввод.")
        except Exception as e:
            print(f"Во время работы терминала произошла ошибка: {e}")

    def рассчитать_сдачу(self, оплата):
        """
        Рассчитывает сдачу для оплаты.

        Параметры:
            оплата (float): Сумма, внесенная пользователем.

        Возвращает:
            float: Сдача.

        Исключения:
            ValueError: Если оплата меньше суммы заказа.
        """
        сумма_заказа = self.заказ.сумма()
        if оплата < сумма_заказа:
            raise ValueError("Оплата недостаточна!")
        return оплата - сумма_заказа

    def принять_оплату(self):
        """
        Принимает оплату от пользователя.

        Запрашивает сумму оплаты и рассчитывает сдачу.
        Если оплата недостаточна, вызывает исключение.
        """
        try:
            сумма_заказа = self.заказ.сумма()
            print(f"Сумма заказа: {сумма_заказа:.2f} р.")
            оплата = float(input("Введите сумму: "))
            сдача = self.рассчитать_сдачу(оплата)
            print(f"Вы внесли {оплата:.2f} р. Сдача: {сдача:.2f} р.")
        except Exception as e:
            print(f"Оплата не удалась: {e}")
            raise